-- Drop tables
DROP TABLE national_parks;
DROP TABLE trails;
DROP TABLE trail_stats;
DROP TABLE species_stats;
DROP TABLE parks_trails;


-- Create tables
CREATE TABLE national_parks (
	park_code VARCHAR(366) PRIMARY KEY,
	national_park VARCHAR(366),
	state VARCHAR(366),
	acres INT,
	latitude NUMERIC,
	longitude NUMERIC,
	visitors NUMERIC
);

CREATE TABLE trails (
	trail_id VARCHAR(366) PRIMARY KEY,
	trail_name VARCHAR(366),
	national_park VARCHAR(366),
	state VARCHAR(366),
	trailhead_lat NUMERIC,
	trailhead_long NUMERIC
);

CREATE TABLE trail_stats (
	park_code VARCHAR(366) NOT NULL,
	trail_id VARCHAR(366) PRIMARY KEY,
	popularity NUMERIC,
	length NUMERIC,
	elevation NUMERIC,
	difficulty NUMERIC,
	route_type VARCHAR(366),
	rating NUMERIC,
	num_reviews NUMERIC
);

CREATE TABLE species_stats (
	park_code VARCHAR(366),
	national_park VARCHAR(366),
	category VARCHAR(366),
	animal_name VARCHAR(366),
	abundance VARCHAR(366),
	conservation_status VARCHAR(366)
);

CREATE TABLE parks_trails (
	trail_id VARCHAR(366),
	park_code VARCHAR(366)
);

-- Check Tables
SELECT * FROM national_parks;
SELECT * FROM species_stats;
SELECT * FROM trail_stats;
SELECT * FROM trails;



-- Add Foreign Keys
ALTER TABLE trail_stats ADD CONSTRAINT fk_trail_stats_trail_id FOREIGN KEY(trail_id)
REFERENCES trails (trail_id);

ALTER TABLE trail_stats ADD CONSTRAINT fk_trail_stats_park_code FOREIGN KEY(park_code)
REFERENCES national_parks (park_code);



-- Example queries
-- "I want to see what trails have birds and difficulty level less than 3"
SELECT species_stats.animal_name, trail_stats.park_code, trail_stats.trail_id
FROM trail_stats
INNER JOIN species_stats ON trail_stats.park_code=species_stats.park_code
WHERE species_stats.category = 'Bird' AND trail_stats.difficulty <= 3 ;

-- "Are there more trails in parks that have more acreage?"
SELECT count(trails.trail_id) AS num_trails, national_parks.national_park, SUM(national_parks.acres) AS total_acres
FROM national_parks
INNER JOIN trails ON national_parks.national_park=trails.national_park
GROUP BY national_parks.national_park
ORDER BY total_acres;
